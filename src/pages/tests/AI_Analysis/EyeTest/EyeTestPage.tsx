import { useState, useRef, useEffect } from 'react';
import { RotateCcw, Zap, Eye } from 'lucide-react';
import TestContainer from '@/components/common/TestContainer/TestContainer';
import Button from '@/components/common/Button/Button';
import Typography from '@/components/common/Typography/Typography';
import {
  StyledTestStep,
  StyledImageUpload,
  StyledImagePreview,
  StyledResultSection,
  StyledResultCard,
  StyledGenderSelector,
  StyledGenderOption,
  StyledLoadingAnimation,
  StyledCelebSection,
  StyledCelebCard,
} from './EyeTestPage.style';
import ShareResult from '@/components/common/ShareResult/ShareResult';
import AILibraryLoader from '@/utils/aiLibraryLoader';

interface EyeAnalysisResult {
  eyeType: string;
  confidence: number;
  description: string;
  celebrities: string;
  message: string;
}

const EyeTestPage = () => {
  const [step, setStep] = useState<'gender' | 'upload' | 'analysis' | 'result'>('gender');
  const [selectedGender, setSelectedGender] = useState<'male' | 'female' | null>(null);
  const [selectedImage, setSelectedImage] = useState<string | null>(null);
  const [result, setResult] = useState<EyeAnalysisResult | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isModelReady, setIsModelReady] = useState(false);
  const [loadingStep, setLoadingStep] = useState('ÎùºÏù¥Î∏åÎü¨Î¶¨ Î°úÎî© Ï§ë...');
  const [modelError, setModelError] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [showShareResult, setShowShareResult] = useState(false);
  const isComponentMountedRef = useRef(true);

  const eyeTypeInfo = {
    Î¥âÌô©Ïïà: {
      emoji: 'ü¶Ö',
      color: '#8B5CF6',
      description:
        "'Î∂àÍ∞ÄÎä•ÏùÄ ÏóÜÎã§!' Î¥âÌô©ÏïàÏùÄ Îàà Í¥ÄÏÉÅ Ï§ëÏóêÏÑúÎèÑ ÏµúÍ≥†Î°ú ÍºΩÌûàÎäî Ïú†ÌòïÏûÖÎãàÎã§. ÎààÏù¥ Í∏∏Í≥† Í∞ÄÎäòÎ©∞, ÎààÎèôÏûêÍ∞Ä ÎßëÍ≥† ÎòêÎ†∑Ìï¥ Í≥†Í∑ÄÌïú Í∏∞ÌíàÏù¥ ÌùêÎ•¥Îäî Í≤ÉÏù¥ ÌäπÏßïÏù¥Ï£†. ÏßÄÌòúÏôÄ ÎçïÏùÑ Í≤∏ÎπÑÌïòÏó¨ Îõ∞Ïñ¥ÎÇú ÌÜµÏ∞∞Î†•ÏúºÎ°ú ÏÑ∏ÏÉÅÏùÑ ÏùΩÍ≥†, Ïñ¥Îñ§ Ïñ¥Î†§ÏõÄÎèÑ Í∑πÎ≥µÌï¥ÎÇ¥Îäî Í∞ïÌïú ÏùòÏßÄÎ•º Í∞ÄÏ°åÏäµÎãàÎã§. Î¥âÌô©ÏïàÏùÑ Í∞ÄÏßÑ ÏÇ¨ÎûåÏùÄ ÌÅ∞ ÎúªÏùÑ ÌíàÍ≥† Î™©ÌëúÎ•º Ìñ•Ìï¥ Íµ≥Í±¥Ìûà ÎÇòÏïÑÍ∞ÄÎ©∞, Í≤∞Íµ≠ÏóêÎäî Î™®ÎëêÏùò Ï°¥Í≤ΩÏùÑ Î∞õÎäî Ïù∏Î¨ºÏù¥ Îê©ÎãàÎã§. Ïã§Ï†úÎ°ú ÏòàÎ°úÎ∂ÄÌÑ∞ Î¥âÌô©ÏïàÏùÄ Ï†úÏôïÏùò ÎààÏù¥Îùº Î∂àÎ†∏ÏäµÎãàÎã§.",
      celebrities: 'Î∂ÄÏ≤òÎãò, ÏÑ∏Ï¢ÖÎåÄÏôï, Ïù¥ÏàúÏã†, Ïú†ÏäπÌò∏, ÏÜåÏßÄÏÑ≠, ÎßàÌÅ¨ Ï£ºÏª§Î≤ÑÍ∑∏, Îπå Í≤åÏù¥Ï∏†, ÏõåÎ†å Î≤ÑÌïè',
    },
    Ïö©Ïïà: {
      emoji: 'üêâ',
      color: '#6366F1',
      description:
        'Î¥âÌô©ÏïàÍ≥º ÎçîÎ∂àÏñ¥ ÏµúÍ≥†Ïùò Í¥ÄÏÉÅÏúºÎ°ú ÍºΩÌûàÎäî Ïö©ÏïàÏùÄ, ÎßàÏπò Ïö©Ïùò ÎààÏ≤òÎüº ÏúÑÏóÑ ÏûàÍ≥† Í∞ïÎ†¨Ìïú Í∏∞Ïö¥ÏùÑ Î∞úÏÇ∞Ìï©ÎãàÎã§. ÎààÎèôÏûêÍ∞Ä ÌÅ¨Í≥† ÌùëÎ∞±Ïù¥ Î∂ÑÎ™ÖÌïòÎ©∞, ÎààÍº¨Î¶¨Í∞Ä Ìûò ÏûàÍ≤å Ïò¨ÎùºÍ∞Ñ Í≤ÉÏù¥ ÌäπÏßïÏûÖÎãàÎã§. Ïö©ÏïàÏùÑ Í∞ÄÏßÑ ÏÇ¨ÎûåÏùÄ ÌÉÄÍ≥†ÎÇú Î¶¨ÎçîÏã≠Í≥º Ïπ¥Î¶¨Ïä§ÎßàÎ°ú Ï£ºÎ≥ÄÏùÑ Ïù¥ÎÅåÎ©∞, ÌÅ∞ Ï°∞ÏßÅÏù¥ÎÇò ÎÇòÎùºÎ•º Îã§Ïä§Î¶¥ Í∏∞ÌöåÎ•º ÏñªÏäµÎãàÎã§. Î∂àÏùòÎ•º Î≥¥Î©¥ Ï∞∏ÏßÄ Î™ªÌïòÎäî Í∞ïÏßÅÌï®Í≥º ÏãúÎåÄÎ•º Íø∞Îö´Îäî ÌòúÏïàÏùÑ ÏßÄÎÖÄ, ÎßéÏùÄ ÏÇ¨ÎûåÎì§Ïùò Ï°¥Í≤ΩÍ≥º Ïã†Î¢∞Î•º Î∞õÏäµÎãàÎã§.',
      celebrities: 'ÍπÄÏó∞ÏïÑ, Î∏îÎûôÌïëÌÅ¨ Ï†úÎãà, Ìä∏ÏôÄÏù¥Ïä§ Îã§ÌòÑ, Ï†ÑÏßÄÌòÑ, Ïù¥ÏòÅÏï†, Î∞ïÏÑúÏ§Ä',
    },
    Ìò∏Ïïà: {
      emoji: 'üêÖ',
      color: '#06B6D4',
      description:
        'Ìò∏Ïïà(Ìò∏ÎûëÏù¥ Îàà)ÏùÄ ÌÅ¨Í≥† Îë•Í∑º ÎààÎß§Ïóê ÏúÑÏïÑÎûò ÎààÍ∫ºÌíÄÏù¥ ÎëêÌÑ∞Ïõå Í∞ïÏù∏ÌïòÎ©¥ÏÑúÎèÑ Ïò®ÌôîÌïú Ïù∏ÏÉÅÏùÑ Ï§çÎãàÎã§. ÎßπÏàòÏùò ÏôïÏù∏ Ìò∏ÎûëÏù¥Ï≤òÎüº Ïö©Í∞êÌïòÍ≥† Í∞ïÏßÅÌïú ÏÑ±Í≤©ÏùÑ Í∞ÄÏ°åÏúºÎ©∞, ÌïúÎ≤à ÏãúÏûëÌïú ÏùºÏùÄ ÎÅùÍπåÏßÄ Ìï¥ÎÇ¥Îäî ÎÅàÍ∏∞ÏôÄ Ï∂îÏßÑÎ†•Ïù¥ Îõ∞Ïñ¥ÎÇ©ÎãàÎã§. Ï†ïÏùòÍ∞êÏù¥ Ìà¨Ï≤†Ìï¥ Î∂àÏùòÏôÄ ÌÉÄÌòëÌïòÏßÄ ÏïäÍ≥†, Î¶¨ÎçîÎ°úÏÑú ÏÇ¨ÎûåÎì§ÏùÑ Ïù¥ÎÅÑÎäî Í∏∞ÏßàÏù¥ Í∞ïÌï©ÎãàÎã§. Ï§ëÎÖÑ Ïù¥ÌõÑ ÌÅ∞ Ïû¨Î¨ºÍ≥º Î™ÖÏòàÎ•º ÏñªÏñ¥ ÌíçÏ°±Ìïú ÏÇ∂ÏùÑ ÏÇ¥ Í∞ÄÎä•ÏÑ±Ïù¥ ÎÜíÏäµÎãàÎã§.',
      celebrities: 'Í∞ïÎèôÏõê, Î∞©ÌÉÑÏÜåÎÖÑÎã® ÏßÑ, Ï£ºÏõê, ÏßÄÏó∞(Ìã∞ÏïÑÎùº), Î•òÏ§ÄÏó¥, ÍπÄÌÉúÎ¶¨',
    },
    Í≥µÏûëÏïà: {
      emoji: 'ü¶ö',
      color: '#10B981',
      description:
        'ÌôîÎ†§ÌïòÎ©¥ÏÑúÎèÑ Ïö∞ÏïÑÌïú Í≥µÏûëÏïàÏùÄ ÏïÑÎ¶ÑÎã§Ïö¥ ÎààÏçπÍ≥º Ìï®Íªò Îß§Î†•Ï†ÅÏù∏ ÎààÎπõÏùÑ Î∞úÏÇ∞Ìï©ÎãàÎã§. Ï¥ùÎ™ÖÌïòÍ≥† ÏÇ¨Î¶¨ÌåêÎã®Ïù¥ Îõ∞Ïñ¥ÎÇò Ïñ¥Îñ§ ÏùºÏùÑ ÌïòÎì† ÏßÄÌòúÎ°≠Í≤å Ìï¥Í≤∞Ìï©ÎãàÎã§. ÌäπÌûà ÏòàÏà†Ï†Å Í∞êÍ∞ÅÏù¥ Îõ∞Ïñ¥ÎÇòÍ≥†, Ï£ºÎ≥Ä ÏÇ¨ÎûåÎì§ÏóêÍ≤å Ïù∏Í∏∞Í∞Ä ÎßéÏïÑ Ï¢ãÏùÄ Î∞∞Ïö∞ÏûêÎ•º ÎßåÎÇò ÌôîÎ™©Ìïú Í∞ÄÏ†ïÏùÑ Ïù¥Î£∞ Í∞ÄÎä•ÏÑ±Ïù¥ ÎÜíÏäµÎãàÎã§. ÏûêÏã†Ïùò Ïû¨Îä•Í≥º ÎÖ∏Î†•ÏúºÎ°ú Í∞ÄÎ¨∏ÏùÑ ÏùºÏúºÌÇ§Í≥† Ïù¥Î¶ÑÏùÑ ÎÑêÎ¶¨ ÏïåÎ¶¨Í≤å Îê† Ïö¥Î™ÖÏùÑ ÌÉÄÍ≥†ÎÇ¨ÏäµÎãàÎã§.',
      celebrities: 'ÌïúÏòàÏä¨, ÏûÑÎ≥¥Îùº, ÍπÄÎØºÌù¨, ÏïÑÏù¥Î¶∞(Î†àÎìúÎ≤®Î≤≥)',
    },
    ÏÇ¨ÏûêÎàà: {
      emoji: 'ü¶Å',
      color: '#F59E0B',
      description:
        'ÏÇ¨ÏûêÎààÏùÄ ÌÅ¨Í≥† ÏãúÏõêÌïú ÎààÎß§Ïóê ÎààÍº¨Î¶¨Í∞Ä ÏÇ¥Ïßù Ïò¨ÎùºÍ∞Ä ÏûàÏñ¥ Îì¨ÏßÅÌïòÍ≥† Ìò∏ÌÉïÌïú Ïù∏ÏÉÅÏùÑ Ï§çÎãàÎã§. ÌÉÄÍ≥†ÎÇú ÏßÄÌòúÏôÄ Ïö©ÎßπÌï®ÏúºÎ°ú Ï£ºÎ≥Ä ÏÇ¨ÎûåÎì§ÏùÑ ÏïÑÏö∞Î•¥Îäî Í∞ïÎ†•Ìïú Î¶¨ÎçîÏã≠ÏùÑ Í∞ÄÏ°åÏäµÎãàÎã§. Ïñ¥Îñ§ Î™®ÏûÑÏóêÏÑúÎì† ÏûêÏó∞Ïä§ÎüΩÍ≤å Ï§ëÏã¨Ïù¥ ÎêòÎäî Îß§Î†•Ïù¥ ÏûàÏúºÎ©∞, Ï†äÏùÄ ÎÇòÏù¥Ïóê ÏùºÏ∞ç Ï∂úÏÑ∏ÌïòÏó¨ Î™ÖÏÑ±ÏùÑ ÏñªÏùÑ Ïàò ÏûàÏäµÎãàÎã§. Îã§Îßå, ÎïåÎ°úÎäî Í≥ºÌïú ÏûêÏã†Í∞êÏù¥ Ïò§ÎßåÌï®ÏúºÎ°ú ÎπÑÏ∂∞Ïßà Ïàò ÏûàÏúºÎãà, Ìï≠ÏÉÅ Í≤∏ÏÜêÌïú ÏûêÏÑ∏Î•º Ïú†ÏßÄÌïòÎäî Í≤ÉÏù¥ Ï¢ãÏäµÎãàÎã§.',
      celebrities: 'Í≥†Ïàò, Ïû•ÎèôÍ±¥, Ïù¥Î≥ëÌóå, ÎßàÎèôÏÑù, ÏµúÎØºÏàò',
    },
    ÏÜåÎàà: {
      emoji: 'üêÑ',
      color: '#EF4444',
      description:
        'ÏÜåÎààÏùÄ ÎààÏùò Í∞ÄÎ°ú Í∏∏Ïù¥Í∞Ä ÏßßÍ≥† ÎààÍ∫ºÌíÄÏù¥ ÎëêÌàºÌïòÏó¨ ÏàúÌïòÍ≥† Ïù∏ÏûêÌïú ÎäêÎÇåÏùÑ Ï§çÎãàÎã§. ÏÑ±ÌíàÏù¥ Ïò®ÌôîÌïòÍ≥† Ïù∏ÎÇ¥Ïã¨Ïù¥ Í∞ïÌï¥ Ïñ¥Îñ§ Ïñ¥Î†§ÏõÄÎèÑ Î¨µÎ¨µÌûà Ïù¥Í≤®ÎÇ¥Îäî ÎöùÏã¨ÏùÑ Í∞ÄÏ°åÏäµÎãàÎã§. ÌäπÌûà ÏÑ±Ïã§ÌïòÍ≥† Î∂ÄÏßÄÎü∞Ìïú ÏÑ±Í≤© ÎçïÎ∂ÑÏóê Ï†äÏùÄ ÏãúÏ†àÎ∂ÄÌÑ∞ Íæ∏Ï§ÄÌûà Ïû¨Î¨ºÏùÑ Î™®ÏïÑ ÌÅ∞ Î∂ÄÎ•º Ïù¥Î£®Í≤å Îê©ÎãàÎã§. Í±¥Í∞ïÌïú Ï≤¥ÏßàÎ°ú Ïû•ÏàòÌïòÎäî Í≤ΩÌñ•Ïù¥ ÏûàÏúºÎ©∞, Ïò§Îûú ÏãúÍ∞Ñ ÎèôÏïà Í∞ÄÏ°±Í≥º Ìï®Íªò ÌñâÎ≥µÌïòÍ≥† ÌíçÏöîÎ°úÏö¥ ÏÇ∂ÏùÑ ÎàÑÎ¶¥ Ïàò ÏûàÎäî Ï∂ïÎ≥µÎ∞õÏùÄ ÎààÏûÖÎãàÎã§.',
      celebrities: 'Î∞ïÎ≥¥ÏòÅ, Ìä∏ÏôÄÏù¥Ïä§ ÏØîÏúÑ, Ïú†Ïû¨ÏÑù, Í∞ïÌò∏Îèô, ÏàòÌòÑ(ÏïÖÎÆ§)',
    },
    Í±∞Î∂ÅÏù¥Îàà: {
      emoji: 'üê¢',
      color: '#6B7280',
      description:
        'Í±∞Î∂ÅÏù¥ÎààÏùÄ Îë•Í∑º ÎààÎß§Ïóê ÎààÍ∫ºÌíÄÏù¥ Ïó¨Îü¨ Í≤πÏúºÎ°ú Í≤πÏ≥êÏßÑ ÌòïÌÉúÎ•º Í∞ÄÎ¶¨ÌÇµÎãàÎã§. ÌñâÎèôÏù¥ ÎäêÍ∏ãÌïòÍ≥† Ïó¨Ïú†Î°úÏö¥ ÏÑ±ÌíàÏùÑ ÏßÄÎÖîÏßÄÎßå, ÏÜçÏúºÎ°úÎäî ÍπäÏùÄ ÏßÄÌòúÏôÄ ÌÜµÏ∞∞Î†•ÏùÑ ÌíàÍ≥† ÏûàÏäµÎãàÎã§. Í≤âÏúºÎ°ú ÎìúÎü¨ÎÇ¥ÏßÄ ÏïäÎäî Í∞ïÏù∏Ìï®ÏúºÎ°ú Ïò§Îûú ÏÑ∏Ïõî Í±¥Í∞ïÌïòÍ≤å Ïû•ÏàòÌïòÎ©∞, ÎßêÎÖÑÏóêÎäî ÌèâÌôîÎ°≠Í≥† ÌñâÎ≥µÌïú ÏÇ∂ÏùÑ ÏòÅÏúÑÌï©ÎãàÎã§. Ïû¨Î¨ºÏö¥Ïù¥ Ï¢ãÍ≥† Ï£ºÎ≥Ä ÏÇ¨ÎûåÎì§ÏóêÍ≤å Í∑ÄÌïú ÎåÄÏ†ëÏùÑ Î∞õÏúºÎ©∞, Íæ∏Ï§ÄÌûà ÎÖ∏Î†•ÌïòÏó¨ Í≤∞Íµ≠ÏóêÎäî ÌÅ∞ Í≤∞Ïã§ÏùÑ Îß∫Í≤å ÎêòÎäî ÎààÏûÖÎãàÎã§.',
      celebrities: 'ÏõêÎπà, Ïû•ÌòÅ, ÍπÄÏ¢ÖÍµ≠, Ïù¥ÏÑ†Í∑†',
    },
    ÌïôÎàà: {
      emoji: 'ü¶¢',
      color: '#EC4899',
      description:
        'ÌïôÎààÏùÄ ÎààÏù¥ Í∏∏Í≥† Í∞ÄÎäòÎ©∞, ÎààÎèôÏûêÍ∞Ä ÌùëÎ∞±Ïù¥ ÎöúÎ†∑ÌïòÏó¨ ÎßëÍ≥† Í≥†Í≥†Ìïú ÎäêÎÇåÏùÑ Ï§çÎãàÎã§. ÌïôÏ≤òÎüº Ï≤≠Î†¥Í≤∞Î∞±ÌïòÍ≥† Íπ®ÎÅóÌïú ÏÑ±ÌíàÏùÑ ÏßÄÎÖîÏúºÎ©∞, ÏßÄÏ†ÅÏù¥Í≥† ÌïôÎ¨∏Ï†ÅÏù∏ ÏÑ±Ï∑®Í∞Ä Îõ∞Ïñ¥ÎÇ©ÎãàÎã§. ÎÜíÏùÄ Ïù¥ÏÉÅÍ≥º ÌÅ∞ Ìè¨Î∂ÄÎ•º Í∞ÄÏßÄÍ≥† ÏûàÏñ¥ ÎßéÏùÄ ÏÇ¨ÎûåÎì§Ïùò Ï°¥Í≤ΩÍ≥º ÏÑ†ÎßùÏùÑ Î∞õÏäµÎãàÎã§. ÌäπÌûà ÌïôÎààÏùÄ Í∑ÄÌïú Ïã†Î∂ÑÏù¥ÎÇò ÏßÄÏúÑÎ•º ÏñªÏùÑ Í∞ÄÎä•ÏÑ±Ïù¥ ÎÜíÏïÑ, ÌïôÏûêÎÇò ÏòàÏà†Í∞Ä, Í≥†ÏúÑ Í¥ÄÎ£å Îì± Ï†ïÏã†Ï†Å Í∞ÄÏπòÎ•º Ï∂îÍµ¨ÌïòÎäî Î∂ÑÏïºÏóêÏÑú ÌÅ∞ ÏÑ±Í≥µÏùÑ Í±∞Îë°ÎãàÎã§.',
      celebrities: 'ÏàòÏßÄ, ÏàòÏï†, ÌóàÏßÄÏõÖ, ÍπÄÎØºÌù¨, Ïù¥ÎÇòÏòÅ',
    },
  };

  useEffect(() => {
    let isCancelled = false;

    const loadLibraries = async () => {
      try {
        setLoadingStep('TensorFlow.js Î°úÎî© Ï§ë...');
        const loader = AILibraryLoader.getInstance();
        await loader.loadTensorFlow();

        if (isCancelled || !isComponentMountedRef.current) return;

        setLoadingStep('Teachable Machine Î°úÎî© Ï§ë...');
        await loader.loadTeachableMachine();

        if (loader.isTeachableMachineReady()) {
          setIsModelReady(true);
          setModelError(null);
          setLoadingStep('ÏôÑÎ£å!');
        } else {
          throw new Error('ÎùºÏù¥Î∏åÎü¨Î¶¨Îäî Î°úÎìúÎêòÏóàÏúºÎÇò Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
        }
      } catch (error) {
        const message = error instanceof Error ? error.message : 'ÎùºÏù¥Î∏åÎü¨Î¶¨ Î°úÎìú Ïã§Ìå®';
        if (!isCancelled) {
          setModelError(message);
          setIsModelReady(false);
        }
      }
    };

    const timer = setTimeout(() => {
      if (!isCancelled) loadLibraries();
    }, 500);

    return () => {
      isCancelled = true;
      clearTimeout(timer);
    };
  }, []);

  useEffect(() => {
    isComponentMountedRef.current = true;
    return () => {
      isComponentMountedRef.current = false;
    };
  }, []);

  const handleGenderSelect = (gender: 'male' | 'female') => {
    setSelectedGender(gender);
    setStep('upload');
  };

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = e => {
        setSelectedImage(e.target?.result as string);
        setStep('analysis');
      };
      reader.readAsDataURL(file);
    }
  };

  const analyzeImage = async () => {
    if (!selectedImage || !isModelReady) {
      alert('Î™®Îç∏Ïù¥ ÏïÑÏßÅ Î°úÎìúÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    setIsLoading(true);

    try {
      const modelURL =
        selectedGender === 'male'
          ? 'https://teachablemachine.withgoogle.com/models/jdyVHXvhx/'
          : 'https://teachablemachine.withgoogle.com/models/jdyVHXvhx/';
      const model = await window.tmImage.load(modelURL + 'model.json', modelURL + 'metadata.json');

      const img = new Image();
      img.crossOrigin = 'anonymous';

      img.onload = async () => {
        try {
          const predictions = await model.predict(img);
          const sortedPredictions = predictions.sort(
            (a: any, b: any) => b.probability - a.probability
          );

          const topPrediction = sortedPredictions[0];
          const eyeType = topPrediction.className;
          const eyeData = eyeTypeInfo[eyeType as keyof typeof eyeTypeInfo] || eyeTypeInfo['ÌïôÎàà'];

          setResult({
            eyeType,
            confidence: Math.round(topPrediction.probability * 100),
            description: eyeData.description,
            celebrities: eyeData.celebrities,
            message: `${eyeData.emoji} ÎãπÏã†Ïùò ÎààÏùÄ ${eyeType}ÏûÖÎãàÎã§!`,
          });

          setStep('result');
        } catch (error) {
          console.error('Prediction failed:', error);
          alert('Î∂ÑÏÑù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
        } finally {
          setIsLoading(false);
        }
      };

      img.onerror = () => {
        setIsLoading(false);
        alert('Ïù¥ÎØ∏ÏßÄ Î°úÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Î•∏ Ïù¥ÎØ∏ÏßÄÎ•º ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
      };

      img.src = selectedImage;
    } catch (error) {
      console.error('Model loading failed:', error);
      setIsLoading(false);
      alert('Î™®Îç∏ Î°úÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.');
    }
  };

  const resetTest = () => {
    setStep('gender');
    setSelectedGender(null);
    setSelectedImage(null);
    setResult(null);
    setIsLoading(false);
  };

  const shareResult = () => setShowShareResult(true);
  const closeShareResult = () => setShowShareResult(false);

  if (modelError) {
    return (
      <TestContainer title="üëÅÔ∏è AI Îàà Í¥ÄÏÉÅ ÌÖåÏä§Ìä∏" description="ÎùºÏù¥Î∏åÎü¨Î¶¨ Î°úÎìú Ï§ë Ïò§Î•ò Î∞úÏÉù">
        <StyledLoadingAnimation>
          <div className="error-icon" style={{ fontSize: '48px', color: '#EF4444' }}>
            ‚ö†Ô∏è
          </div>
          <Typography variant="h5" color="#EF4444">
            Î°úÎìú Ïã§Ìå®
          </Typography>
          <Typography variant="body2" color="#6B7280">
            {modelError}
          </Typography>
          <Button variant="primary" onClick={() => window.location.reload()}>
            ÏÉàÎ°úÍ≥†Ïπ®
          </Button>
        </StyledLoadingAnimation>
      </TestContainer>
    );
  }

  if (!isModelReady) {
    return (
      <TestContainer title="üëÅÔ∏è AI Îàà Í¥ÄÏÉÅ ÌÖåÏä§Ìä∏" description="AI Î™®Îç∏ÏùÑ Î°úÎìúÌïòÎäî Ï§ëÏûÖÎãàÎã§...">
        <StyledLoadingAnimation>
          <div className="spinner" />
          <Typography variant="body1">{loadingStep}</Typography>
          <Typography variant="caption" color="#6B7280">
            Ï≤òÏùå Î∞©Î¨∏ Ïãú ÏãúÍ∞ÑÏù¥ Îã§ÏÜå Í±∏Î¶¥ Ïàò ÏûàÏäµÎãàÎã§ üëÅÔ∏è
          </Typography>
        </StyledLoadingAnimation>
      </TestContainer>
    );
  }

  return (
    <TestContainer
      title="üëÅÔ∏è AI Îàà Í¥ÄÏÉÅ ÌÖåÏä§Ìä∏"
      description="AIÍ∞Ä ÎãπÏã†Ïùò ÎààÏùÑ Î∂ÑÏÑùÌï¥ÏÑú Í¥ÄÏÉÅÏùÑ ÏïåÎ†§ÎìúÎ†§Ïöî!"
      showShare={step === 'result'}
      onShare={shareResult}
    >
      {step === 'gender' && (
        <StyledTestStep>
          <Typography variant="h4" align="center">
            ÏÑ±Î≥ÑÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî
          </Typography>
          <Typography variant="body2" align="center" color="#6B7280">
            Îçî Ï†ïÌôïÌïú Î∂ÑÏÑùÏùÑ ÏúÑÌï¥ ÏÑ±Î≥ÑÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî
          </Typography>

          <StyledGenderSelector>
            <StyledGenderOption selected={false} onClick={() => handleGenderSelect('female')}>
              <div className="emoji">üë©</div>
              <Typography variant="h5">Ïó¨ÏÑ±</Typography>
            </StyledGenderOption>

            <StyledGenderOption selected={false} onClick={() => handleGenderSelect('male')}>
              <div className="emoji">üë®</div>
              <Typography variant="h5">ÎÇ®ÏÑ±</Typography>
            </StyledGenderOption>
          </StyledGenderSelector>
        </StyledTestStep>
      )}

      {step === 'upload' && (
        <StyledTestStep>
          <Typography variant="h4" align="center">
            ÎààÏù¥ Ïûò Î≥¥Ïù¥Îäî ÏÇ¨ÏßÑÏùÑ ÏóÖÎ°úÎìúÌï¥Ï£ºÏÑ∏Ïöî
          </Typography>
          <Typography variant="body2" align="center" color="#6B7280">
            Ï†ïÎ©¥ÏùÑ Î∞îÎùºÎ≥¥Í≥† ÎààÏù¥ ÏÑ†Î™ÖÌïòÍ≤å Î≥¥Ïù¥Îäî ÏÇ¨ÏßÑÏùºÏàòÎ°ù Ï†ïÌôïÌï¥Ïöî
          </Typography>

          <StyledImageUpload onClick={() => fileInputRef.current?.click()}>
            <Eye size={48} color="#6366F1" />
            <Typography variant="body1">ÏÇ¨ÏßÑ ÏÑ†ÌÉùÌïòÍ∏∞</Typography>
            <Typography variant="caption" color="#6B7280">
              JPG, PNG ÌååÏùºÎßå Í∞ÄÎä• (ÏµúÎåÄ 10MB)
            </Typography>
          </StyledImageUpload>

          <input
            ref={fileInputRef}
            type="file"
            accept="image/*"
            onChange={handleImageUpload}
            style={{ display: 'none' }}
          />
        </StyledTestStep>
      )}

      {step === 'analysis' && (
        <StyledTestStep>
          <Typography variant="h4" align="center">
            ÏóÖÎ°úÎìúÎêú ÏÇ¨ÏßÑ
          </Typography>

          {selectedImage && (
            <StyledImagePreview>
              <img src={selectedImage} alt="ÏóÖÎ°úÎìúÎêú ÏÇ¨ÏßÑ" />
            </StyledImagePreview>
          )}

          <div style={{ display: 'flex', gap: '12px', justifyContent: 'center' }}>
            <Button variant="secondary" onClick={() => setStep('upload')}>
              <RotateCcw size={16} />
              Îã§Ïãú ÏÑ†ÌÉù
            </Button>
            <Button
              variant="primary"
              onClick={analyzeImage}
              loading={isLoading}
              disabled={isLoading}
            >
              <Zap size={16} />
              {isLoading ? 'Í¥ÄÏÉÅ Î∂ÑÏÑù Ï§ë...' : 'Î∂ÑÏÑù ÏãúÏûë'}
            </Button>
          </div>

          {isLoading && (
            <StyledLoadingAnimation>
              <div className="spinner" />
              <Typography variant="body1">AIÍ∞Ä ÎãπÏã†Ïùò ÎààÏùÑ ÏûêÏÑ∏Ìûà Î∂ÑÏÑù Ï§ëÏûÖÎãàÎã§...</Typography>
              <Typography variant="caption" color="#6B7280">
                Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî üëÅÔ∏è
              </Typography>
            </StyledLoadingAnimation>
          )}
        </StyledTestStep>
      )}

      {step === 'result' && result && (
        <StyledTestStep>
          <Typography variant="h4" align="center">
            üéâ Í¥ÄÏÉÅ Î∂ÑÏÑù ÏôÑÎ£å!
          </Typography>

          <StyledResultSection>
            <StyledResultCard
              color={eyeTypeInfo[result.eyeType as keyof typeof eyeTypeInfo]?.color || '#6366F1'}
            >
              <div className="emoji">
                {eyeTypeInfo[result.eyeType as keyof typeof eyeTypeInfo]?.emoji || 'üëÅÔ∏è'}
              </div>
              <Typography variant="h2" color="white">
                {result.eyeType}
              </Typography>
              <Typography variant="body1" color="">
                {result.description}
              </Typography>
              {/* <Typography variant="caption" color="rgba(255,255,255,0.8)">
                Ïã†Î¢∞ÎèÑ: {result.confidence}%
              </Typography> */}
            </StyledResultCard>

            <StyledCelebSection>
              <Typography variant="h5" align="center">
                üëë Í∞ôÏùÄ ÎààÏùÑ Í∞ÄÏßÑ Ïú†Î™ÖÏù∏Îì§
              </Typography>
              <StyledCelebCard>
                <Typography variant="body1">{result.celebrities}</Typography>
              </StyledCelebCard>
            </StyledCelebSection>

            {selectedImage && (
              <StyledImagePreview>
                <img src={selectedImage} alt="Î∂ÑÏÑùÎêú ÏÇ¨ÏßÑ" />
              </StyledImagePreview>
            )}
          </StyledResultSection>

          <div style={{ display: 'flex', gap: '12px', justifyContent: 'center' }}>
            <Button variant="secondary" onClick={resetTest}>
              Îã§Ïãú ÌÖåÏä§Ìä∏
            </Button>
            <Button variant="primary" onClick={shareResult}>
              Í≤∞Í≥º Í≥µÏú†ÌïòÍ∏∞
            </Button>
          </div>

          {showShareResult && (
            <ShareResult
              testTitle="AI Îàà Í¥ÄÏÉÅ ÌÖåÏä§Ìä∏"
              result={result.eyeType}
              description={result.description}
              // confidence={result.confidence}
              userImage={selectedImage || undefined}
              backgroundColor={
                eyeTypeInfo[result.eyeType as keyof typeof eyeTypeInfo]?.color || '#6366F1'
              }
              emoji={eyeTypeInfo[result.eyeType as keyof typeof eyeTypeInfo]?.emoji || 'üëÅÔ∏è'}
              onClose={closeShareResult}
            />
          )}
        </StyledTestStep>
      )}
    </TestContainer>
  );
};

export default EyeTestPage;
